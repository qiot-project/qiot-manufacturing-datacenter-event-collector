### Phase 1 - Build the binary

FROM quay.io/qiotproject/ubi-multiarch-maven:v1.0.1-java11 AS builder
RUN mkdir -p /usr/src/app
COPY pom.xml /usr/src/app/
COPY src /usr/src/app/src
WORKDIR "/usr/src/app"
RUN mvn -N io.takari:maven:wrapper

RUN ./mvnw clean package -U

### Phase 2 - Build the image

FROM quay.io/qiotproject/ubi-multiarch:v1.0.3

ARG JAVA_PACKAGE=java-11-openjdk-devel
ARG RUN_JAVA_VERSION=1.3.8
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'
# Install java and the run-java script
# Also set up permissions for user `1001`
RUN dnf install -y curl ca-certificates ${JAVA_PACKAGE} \
    && dnf update \
    && dnf clean all \
    && mkdir /deployments \
    && chown 1001 /deployments \
    && chmod "g+rwX" /deployments \
    && chown 1001:root /deployments \
    && curl https://repo1.maven.org/maven2/io/fabric8/run-java-sh/${RUN_JAVA_VERSION}/run-java-sh-${RUN_JAVA_VERSION}-sh.sh -o /deployments/run-java.sh \
    && chown 1001 /deployments/run-java.sh \
    && chmod 540 /deployments/run-java.sh \
    && echo "securerandom.source=file:/dev/urandom" >> /etc/alternatives/jre/conf/security/java.security

# Configure the JAVA_OPTIONS, you can add -XshowSettings:vm to also display the heap size.
ENV JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --chown=1001 --from=builder /usr/src/app/target/quarkus-app/lib/ /deployments/lib/
COPY --chown=1001 --from=builder /usr/src/app/target/quarkus-app/*.jar /deployments/
COPY --chown=1001 --from=builder /usr/src/app/target/quarkus-app/app/ /deployments/app/
COPY --chown=1001 --from=builder /usr/src/app/target/quarkus-app/quarkus/ /deployments/quarkus/

# QIoT
RUN mkdir -p /var/data/qiot/ \
  && chown -R 1001 /var/data/qiot \
  && chmod -R "g+rwX" /var/data/qiot \
  && chown -R 1001:root /var/data/qiot

EXPOSE 8080
USER 1001

ENTRYPOINT [ "/deployments/run-java.sh" ]

